generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model countries {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  iso3166_2             String                  @unique
  iso3166_3             String                  @unique
  num_code              Int                     @unique
  phone_code            String                  @unique
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now()) @updatedAt
  holidays_by_countries holidays_by_countries[]
  states                states[]
  user_locations        user_locations[]
  businesses            businesses[]
}

model states {
  id             Int              @id @default(autoincrement())
  country        countries        @relation(fields: [country_id], references: [id])
  country_id     Int
  name           String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now()) @updatedAt
  cities         cities[]
  user_locations user_locations[]
  businesses     businesses[]
}

model cities {
  id             Int              @id @default(autoincrement())
  state          states           @relation(fields: [state_id], references: [id])
  state_id       Int
  name           String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now()) @updatedAt
  user_locations user_locations[]
  businesses     businesses[]
}

model holidays_by_countries {
  id           Int       @id @default(autoincrement())
  country      countries @relation(fields: [country_id], references: [id])
  country_id   Int
  title        String
  description  String
  holiday_date DateTime
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt

  @@index([country_id], name: "idx_holidays_by_country")
}

model languages {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  iso639_1   String   @unique
  iso639_2   String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model clients {
  id           Int            @id @default(autoincrement())
  business     businesses     @relation(fields: [business_id], references: [id])
  business_id  Int
  first_name   String
  last_name    String
  email        String?
  phone_number String?
  address      String?
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  invoices     invoices[]
  reservations reservations[]
}

model reservation_statuses {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String?
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  reservations reservations[]
}

model reservations {
  id                 Int                  @id @default(autoincrement())
  business           businesses           @relation(fields: [business_id], references: [id])
  business_id        Int
  client             clients              @relation(fields: [client_id], references: [id])
  client_id          Int
  reservation_status reservation_statuses @relation(fields: [status_id], references: [id])
  status_id          Int
  title              String
  service            String
  observations       String
  start_date         DateTime
  end_date           DateTime
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now()) @updatedAt
}

model invoice_statuses {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now()) @updatedAt
  invoices    invoices[]
}

model invoices {
  id             Int              @id @default(autoincrement())
  business       businesses       @relation(fields: [business_id], references: [id])
  business_id    Int
  client         clients          @relation(fields: [client_id], references: [id])
  client_id      Int
  invoice_status invoice_statuses @relation(fields: [status_id], references: [id])
  status_id      Int
  issue_date     DateTime
  due_date       DateTime
  total_amount   Float
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now()) @updatedAt
}

model business_statuses {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now()) @updatedAt
  businesses  businesses[]
}

model businesses {
  id              Int               @id @default(autoincrement())
  account_id      Int               @unique
  account         accounts          @relation(fields: [account_id], references: [id])
  country_id      Int
  country         countries         @relation(fields: [country_id], references: [id])
  state_id        Int
  state           states            @relation(fields: [state_id], references: [id])
  city_id         Int
  city            cities            @relation(fields: [city_id], references: [id])
  status_id       Int
  business_status business_statuses @relation(fields: [status_id], references: [id])
  name            String?
  vision          String?
  mission         String?
  motto           String?
  postal_code     String?
  cell_phone      String?
  home_phone      String?
  tax_id          String?
  website_url     String?
  logo_url        String?
  open_hours      String?
  updated_at      DateTime          @default(now()) @updatedAt
  created_at      DateTime          @default(now())
  clients         clients[]
  invoices        invoices[]
  reservations    reservations[]
}

model accounts {
  id                 Int         @id @default(autoincrement())
  email              String      @unique
  password_hash      String
  is_email_verified  Boolean     @default(false)
  is_person_verified Boolean     @default(false)
  updated_at         DateTime    @default(now()) @updatedAt
  created_at         DateTime    @default(now())
  user               users?
  businesses         businesses?
}

model users {
  id                Int             @id @default(autoincrement())
  account_id        Int             @unique
  account           accounts        @relation(fields: [account_id], references: [id])
  gender_id         Boolean
  gender            genders         @relation(fields: [gender_id], references: [id])
  type_documents_id Int
  type_documents    type_documents? @relation(fields: [type_documents_id], references: [id])
  first_name        String
  last_name         String
  birth_date        DateTime
  user_location     user_locations?
  user_contact      user_contacts?
}

model user_locations {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  user       users     @relation(fields: [user_id], references: [id])
  country_id Int
  country    countries @relation(fields: [country_id], references: [id])
  state_id   Int
  state      states    @relation(fields: [state_id], references: [id])
  city_id    Int
  city       cities    @relation(fields: [city_id], references: [id])
}

model user_contacts {
  id          Int     @id @default(autoincrement())
  user_id     Int     @unique
  user        users   @relation(fields: [user_id], references: [id])
  cell_phone  String?
  home_phone  String?
  postal_code String?
}

model type_documents {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  users       users[]
}

model genders {
  id         Boolean  @id
  name       String
  short_name String   @default("")
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  users      users[]
}
